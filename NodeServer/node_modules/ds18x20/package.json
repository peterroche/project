{
  "name": "ds18x20",
  "description": "A node.JS implementation for using the DS1820, DS18S20 and/or DS18B20 temperature sensor with Raspberry Pi.",
  "version": "0.2.0",
  "main": "index",
  "author": {
    "name": "Marcus Bergman",
    "email": "mraxus@gmail.com"
  },
  "scripts": {
    "test": "node_modules/.bin/tap ./test"
  },
  "keywords": [
    "raspberry pi",
    "sensor",
    "temperature",
    "thermometer",
    "ds1820",
    "ds18s20",
    "ds18b20",
    "ds18x20",
    "raspberry",
    "pi"
  ],
  "dependencies": {
    "async": "~0.2.9",
    "sandal": "~1.0.1",
    "sync-exec": "~0.5"
  },
  "devDependencies": {
    "tap": "~0.4.6",
    "interpreted": "~0.4.0"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/mraxus/ds18x20.js/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mraxus/ds18x20.js"
  },
  "engines": {
    "node": "*"
  },
  "readme": "ds18x20.js\n==========\n\nA node.JS implementation for using the DS1820, DS18S20 and/or DS18B20 temperature sensor with Raspberry Pi.\n\n\n[![NPM](https://nodei.co/npm/ds18x20.png?downloads=true)](https://nodei.co/npm/ds18x20/)\n\n## Description\n\nThis package is to be used by [Raspberry Pi](http://www.raspberrypi.org/) installed with [node.JS](http://blog.rueedlinger.ch/2013/03/raspberry-pi-and-nodejs-basic-setup/ \"How to install node on RPi\") to interact with the awesome temperature sensors [DS1820](http://www.maximintegrated.com/datasheet/index.mvp/id/2795), [DS18S20](http://www.maximintegrated.com/datasheet/index.mvp/id/2815) and [DS18B20](http://www.maximintegrated.com/datasheet/index.mvp/id/2812) made by [Maxim integrated](http://www.maximintegrated.com/).\n\nAt time of writing only the DS18B20 sensor have been tested out with this package. Please tell me if you get the chance to test it with the other sensors.\n\n## Installation\n\n    $ npm install ds18x20\n\n## Usage\n\nEach function in this library can be used sync or async. The same functions are used. The only difference is that if the last argument have a callback function, then it's an async function. There will be examples below for each function, both as sync and async.\n\n\n### Declaring the sensor library\n\n```js\nvar sensor = require('ds18x20');\n```\n\n### Check if driver is loaded\n\nTo be able to probe the sensors, the temperature driver needs to be loaded in your Raspberry pi (done with the command ```sudo modprobe w1-gpio && sudo modprobe w1-therm```).\n\n#### async\n\n```js\nsensor.isDriverLoaded(function (err, isLoaded) {\n    console.log(isLoaded);\n});\n```\n\n#### sync\n\n```js\nvar isLoaded = sensor.isDriverLoaded();\nconsole.log(isLoaded);\n```\n\n#### output\n\n```js\ntrue / false\n```\n\n\n### Load the driver\n\nShould the driver not be loaded you can use the command below. However, to run this command you need to be root (```sudo node```).\nInstead of loading the driver through node, I recommend loading the driver at startup through shell script: ```sudo modprobe w1-gpio && sudo modprobe w1-therm```.\n\n#### async\n\n```js\nsensor.loadDriver(function (err) {\n    if (err) console.log('something went wrong loading the driver:', err)\n    else console.log('driver is loaded');\n});\n```\n\n#### sync\n\n```js\ntry {\n    sensor.loadDriver();\n    console.log('driver is loaded');\n} catch (err) {\n    console.log('something went wrong loading the driver:', err)\n}\n```\n\n\n### List all available sensors\n\n#### async\n\n```js\nsensor.list(function (err, listOfDeviceIds) {\n    console.log(listOfDeviceIds);\n});\n```\n\n#### sync\n\n```js\nvar listOfDeviceIds = sensor.list();\nconsole.log(listOfDeviceIds);\n```\n\n#### output\n\n```js\n[ '28-00000574c791', '28-00000574f4f3' ]\n```\n\n\n### Get the temperature from all avaiable sensors\n\nThe temperature is requested from each sensor. The result is returned in Celsius degrees and rounded to in decimal place.\n\n#### async\n\n```js\nsensor.getAll(function (err, tempObj) {\n    console.log(tempObj);\n});\n```\n\n#### sync\n\n```js\nvar tempObj = sensor.getAll();\nconsole.log(tempObj);\n```\n\n#### output\n\nTemperature in x° C\n```js\n{ '28-00000574c791': 22.9, '28-00000574f4f3': 22.8 }\n```\n\n\n### Get the temperature from one or several sensors\n\nThe result is returned in Celsius degrees and rounded to in decimal place.\n\n#### async\n\n```js\nsensor.get('28-00000574c791', function (err, temp) {\n    console.log(temp);\n});\n```\n\n#### sync\n\n```js\nvar temp = sensor.get('28-00000574c791');\nvar listOfTemps = sensor.get(['28-00000574c791', '28-00000574f4f3']);\nconsole.log(temp);\nconsole.log(listOfTemps);\n```\n\n#### output\n\nTemperature in x° C\n```js\n23.1\n[ 23.1, 23.2 ]\n```\n",
  "readmeFilename": "README.md",
  "_id": "ds18x20@0.2.0",
  "_from": "ds18x20@"
}
